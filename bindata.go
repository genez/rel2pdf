// Code generated by go-bindata.
// sources:
// logo.png
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _logoPng = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xe4\xd7\x07\x37\xdb\x8b\xe3\xc7\xf1\xaf\xd6\xa8\x59\x45\xed\x59\xb3\xa8\x22\xc5\x4f\xdd\xb6\x82\xd6\xae\x1d\xd4\x4a\xa5\x42\x6b\xd5\xa8\x51\x31\x4b\xd5\x4c\x4b\x15\xb5\xd5\x88\x5d\x5b\x2a\x57\x14\xb9\x62\xc4\x6c\x84\xa6\xa9\x0e\x35\xae\x10\x6a\x44\x91\xe4\x7f\xee\xe3\xf8\x7f\xce\x79\x9d\xf3\x79\x0a\xef\x0c\xfb\xbb\xe6\xfc\x3c\x92\x3c\x00\x00\xf0\x5b\x5a\x98\x39\x02\x00\x50\x0c\x00\x80\xd2\xb9\xb3\x00\x00\xb4\x2c\x04\x28\x02\x00\xc0\x16\xe1\x68\x6e\x02\xb4\x4e\x49\x6f\x00\x00\xc0\xee\x0f\xb6\x05\x03\x40\x3b\x92\xf7\xf4\x3e\x07\x00\x9c\x05\xec\x6d\x9c\x6f\x1b\xcb\x87\xc7\x19\x38\x9c\x15\x29\x39\x2b\x5a\xc2\x73\x31\x9f\x43\xbc\x86\x53\xa6\x86\x57\xa6\x86\x43\xa9\x86\x53\xb3\x99\x4f\xa9\x86\x13\xd4\xcc\x65\xd4\x2c\xa2\x54\x23\xa2\xd9\x2c\xa3\xd9\x2c\x0b\x6a\x56\x01\x35\xab\x18\x35\x5f\x35\x6a\x3e\x67\xd6\xc5\x63\xd3\xc5\xeb\xd2\x2f\xe0\xd2\x2f\x68\xd3\x25\x67\xd6\x25\xe4\x89\x91\xf0\xc3\xa8\x9a\x75\x5d\x35\xeb\x32\x30\xeb\x32\xf4\xc3\x28\xc0\x47\x2e\x85\xe0\x2e\x87\xe0\x74\xa3\x70\xd7\xa3\x70\x60\x9b\x2e\xb0\x0b\xc6\xc4\x0b\x63\xe5\x82\xb1\xf2\xc2\x38\x7a\x61\xee\x79\x61\x4c\xfc\x30\xf7\xe0\x18\xab\x10\x9c\x69\x14\xce\x34\x81\x60\x9d\x40\x70\x0a\xc1\xdd\x83\xe3\x3c\xa2\x70\x0f\x42\x70\x41\x21\xb8\x07\x09\x84\xa0\x28\x5c\x64\x14\x21\x32\x81\x80\x48\x20\x58\xa7\x13\x9c\x91\x04\x8f\x74\x82\x27\x92\xe8\x59\x48\x0c\x4a\x27\xf8\x15\x12\x83\x0b\x89\xc1\x15\x44\x44\x3a\xe1\x09\x92\xf8\xa4\x82\x18\x5f\x41\x8c\x42\x51\xe2\x51\x94\xd3\x07\xf2\xa7\x0f\x2e\x9d\x06\x29\x9d\x06\xa9\x32\x22\xd5\x18\x91\x57\x18\x88\x6b\x0c\xc4\x75\x46\x9a\x11\x23\x0d\xcc\x48\xb3\x64\xe4\x58\x31\x72\x1c\x18\x05\x0e\x8c\x02\x77\x46\x01\x94\x51\x06\x65\x94\x3d\x64\xd4\x85\x31\xea\x62\x18\xad\xb1\x39\xcf\xff\x4e\x4b\x27\x3c\x47\x12\x72\x91\xc4\xe7\x85\xc4\xdc\x42\xe2\x9b\x42\xe2\x9b\x0a\x62\x79\x05\xe5\x39\x8a\x92\xde\x46\xc9\x6d\xa3\x20\x7b\x29\x6f\x50\x94\x72\x14\xa5\xb0\x97\x52\xde\xbb\x5a\x81\x5d\x6d\xad\x9f\xaa\x47\x51\xea\xdb\x28\x6d\x6d\x94\xb6\x5e\x4a\x3d\x76\xb5\xb7\x6f\xb5\x17\xbb\x8a\xc5\xae\xa2\xf0\xab\x6d\xf8\x55\x2c\x7e\xb5\x77\x66\x1b\x3b\xb3\x8d\x25\x6d\x33\x5a\x93\x18\xad\x19\x8c\x9e\x0c\x46\xcf\x2b\xe6\x40\x11\x73\xa0\x92\x39\x5a\xc9\x1c\x6d\x60\x4e\xb7\x33\xa7\xfb\x98\x24\xf4\x28\x7e\x0d\x3f\xb6\x81\x9f\xd9\xc6\x93\xb6\xa7\x67\xb6\xf1\xcb\xb4\x19\x12\x8d\xb4\x48\x23\x2d\xd3\x66\x96\x0f\x97\x97\x0f\x17\xd7\xe9\xcb\xeb\x74\x26\x69\x90\xb9\x3c\xc6\x5c\x9e\x61\xae\xcd\x32\xd7\x17\xd7\xd7\xe9\xeb\x3b\x74\xe6\xfa\x37\x16\xed\x1b\x8b\xb6\xbe\xb3\x43\xa7\xff\x87\xbe\xb3\xc3\xdc\xa1\xb3\xe8\x74\x16\x9d\xc5\x62\xd1\x77\xfe\x7b\xac\x23\x16\x8b\x05\xfc\xbf\x5c\x65\xf0\x13\x2d\x00\x00\xb8\x1f\x5b\xb8\x47\x00\x80\xc0\xf0\x7f\xd8\x46\x43\x51\x0f\x00\x00\x90\x88\xbc\xed\x16\xe9\x14\x0a\x8f\x8c\xbe\x1f\xee\x07\x3c\xbe\xff\x30\x24\x52\x2b\xc4\x2f\x52\xfe\x9a\x96\xb6\x96\x0e\xe8\xda\x59\x8f\xa7\x00\xc0\x03\xb5\x34\x03\x3b\xbb\x99\xff\xed\x96\xe3\x43\xfe\x47\x02\xee\xc8\x2f\xd3\x14\x68\x61\x35\x9f\xa7\xb7\x69\xfe\xc5\x6f\x09\xb3\x0f\x0b\xb9\x61\x31\xa7\x95\x55\xa8\xf9\x62\xe4\x7e\xcd\x27\x11\xcc\x52\x31\xb5\x66\x63\x52\x97\x3c\x04\x71\x70\x1c\x70\x94\x37\xb0\x47\xbc\x85\x57\x4a\x7f\x72\xbd\x92\xb9\x75\x22\x47\xff\x6a\xa9\xb2\xf2\x0e\xdb\x73\xa2\x1c\x17\x54\x73\xf2\x72\x6b\xed\x2b\x72\xed\xeb\xbb\x67\xb1\x8b\x96\x2a\xb2\x23\x75\xb7\x76\x13\x93\xb2\x76\xd5\xe1\xd9\xf2\xbc\xc2\xa3\x72\xb0\x49\xff\x05\x0c\x4a\x6d\x5c\xf0\x74\xcb\x5b\x05\x93\x51\x2f\x60\x45\x21\x36\x3e\x14\xab\xcc\x78\x95\xa6\x5e\xf7\x2b\xa7\xb7\x38\x38\xec\xa6\xac\x06\x4b\xdf\x93\x0e\x2f\xd7\x0d\xe2\x0f\x3c\xe7\x6a\x25\x70\xa7\x15\x26\xd4\x5f\x27\x3c\xdc\x59\x32\x1d\x54\x6f\xbb\x79\x13\xcd\x11\xba\x7a\x79\x78\x52\x6c\xe8\x97\xcd\x98\xaf\x64\x0f\xb7\x49\x5f\x23\x59\xc9\xfc\xc8\x86\x5c\xf2\xee\x66\x05\xa5\x29\x2f\x20\xd6\xc9\xee\xe2\x48\xf6\xba\x43\xe7\x4a\xd1\x8b\xaf\x20\xfe\xfa\xb9\x11\xf5\xd9\x5e\x3d\xb1\xba\xcf\x12\xf6\x76\x39\xbf\xfb\xb0\xdf\xda\x85\x56\xde\x30\x1a\xe4\x32\xe1\x8c\x40\xec\x81\xd7\xe0\x53\xee\x82\x26\x09\xe1\x3f\xf1\xf2\x99\xce\x66\x9d\x92\xd5\xf4\xe2\x3f\x7d\xdd\xa3\x65\x85\xa7\xed\x72\x99\x84\xef\x7b\xcb\xc8\xb7\x59\x7b\xbf\xf8\xa6\x1c\xd3\x1d\xf0\xb6\x25\x90\x73\x7d\x63\xda\x2f\x43\x84\xb6\xee\xc3\xbf\x34\x0c\x67\x64\x89\x09\x0f\x97\x52\x58\x6a\xd2\x3e\x65\x76\x08\x2c\x55\xe7\x61\x73\x1e\x29\x62\x72\xd6\xb5\x04\xae\x67\xfb\xa8\x27\x44\xe7\x1e\xea\xa2\xcd\x15\xa4\x9c\x6f\x4f\x82\x42\xf7\xdc\x4a\xce\xea\x82\xe3\xef\x87\xbc\xe9\x4e\x3a\x9d\xb8\x66\xef\x77\x7e\x21\x8d\x1a\xea\xed\x1e\xf2\xd2\x7c\xc2\x99\x8f\x8e\xee\xc3\x8d\xae\x40\xfa\x41\x37\x9e\x1c\x7c\x9e\x94\xf4\x3b\x30\x04\xe7\xc1\x34\xf4\xf4\xf5\xb1\xfb\x63\x23\x3c\xec\x2b\x43\xa3\xb0\x53\x81\x57\x7f\xc6\x86\x86\x16\x17\x35\x13\x03\x7e\xe6\x87\xed\x7e\x4e\xd6\x23\x0c\xc7\x5b\x23\x1a\xd1\xd7\x8a\xa5\x4b\x16\x05\xb7\x46\x93\x9c\x79\x38\x88\x73\x2f\xa6\x9c\x6c\x9d\x6c\x9f\xa5\x4b\x81\x17\xd5\x9d\x6e\xf8\xbf\xe4\x2a\xa6\x78\x31\xa8\xd4\x62\x27\xd5\x7e\xe4\xdf\x4f\xa8\x3b\xe9\xa0\x68\xf2\x12\x3a\x41\xb6\x74\x92\x61\xf4\xf9\x8b\xcd\x4e\xbf\xee\xd7\x94\x97\xec\x83\x01\x42\xa8\x2b\x59\xe0\xef\x89\x55\xd9\x9b\x3f\x60\x08\x11\x59\x37\xa1\x32\xf3\xe4\x66\xc7\x2a\xdf\xb7\x1c\x0a\x3e\x67\xf1\x04\x48\x8c\xa9\x41\x3b\x98\xd3\x26\xf3\x50\x57\x71\xb7\x89\x34\x55\x76\x23\xfe\xd8\x7f\x6e\x62\xf4\x3c\x76\xf7\x38\x30\xbd\x3e\xe6\x50\x77\xc1\x4a\x2d\xe2\xe0\xa9\x95\x83\xe8\x26\xe1\x82\xb2\x4b\x5b\x68\x6e\xca\xe7\x6e\x08\xb4\xd2\x41\xce\x65\xd0\x5e\x43\xfb\x43\x18\xb8\xf8\x9b\x75\x03\x49\x55\x64\xfa\x6e\x8e\x87\xc7\xc1\x3f\x1f\xf2\x44\xca\xcc\xc1\xf6\x77\x15\x0b\x65\x1e\x5d\xa2\x76\x28\x0a\x4c\xac\x15\x05\x5f\x9a\xeb\xe0\x0c\x22\x6a\x6e\xf9\xc1\x53\xbf\x9e\x52\x3f\x13\x6f\x95\x1b\x12\xaf\x70\x09\xc8\xdd\x3c\x3d\x0e\xe4\xf2\xb9\x7e\xa6\x95\x2b\x3f\x4c\xb8\x7d\x41\x7c\x1d\x1f\xec\xb7\x72\x78\x3c\x7e\x3c\x37\x83\x53\xe1\xdb\x33\x2e\xb5\x1f\xec\xce\x59\x6a\x29\xbb\xe0\x37\x44\x4f\x78\x84\xef\x94\x20\x17\x61\x22\x2f\x37\x64\xc7\x96\x99\x43\x4b\x8a\x35\x62\xa9\x2b\xc4\x52\x49\xc2\x3f\x60\xd3\xea\xf6\x48\xad\xc2\x1e\x09\x42\xfd\xcf\x3b\x7f\x6e\x76\x3a\xd6\x23\xa2\x32\xc9\x54\x52\x87\x12\x56\xb3\xe8\x20\xfa\x70\x01\x0a\xb7\x74\x5f\x39\x3f\x79\xa6\x53\x79\x5b\x23\xb7\x8a\x53\xbb\x24\x75\x96\x7b\xda\xc3\x07\xa9\x96\xbf\xf5\xbe\x74\x3f\xb8\xe7\xdc\x14\x7b\x68\x82\xd2\x75\x64\x75\x75\x41\x97\x50\x91\x16\xec\xba\xc0\x79\x69\x52\x58\xd9\x56\xf3\xf7\xff\x69\xba\x8a\xe3\x83\x68\xba\xf3\x46\xb5\xae\x75\x49\x4b\x68\x50\x1b\xbb\xe9\xc7\xb5\x8f\x25\x6d\x72\xd4\xc4\xbb\x67\x34\x3a\x0f\x14\x64\xad\x5b\xac\x07\x83\x6e\xa3\xfb\xde\xab\xcd\x3c\x90\x8a\x2b\x4a\xc6\x39\xb6\x1c\x57\xd7\x8b\xe6\x7b\x97\x06\x0b\xa8\xbe\x89\x8a\x5a\xc0\x12\xe1\x66\x39\xfe\x6a\xf3\xae\x96\xdc\x9f\x26\x9e\xb5\xf8\x76\x35\x82\xc4\xc7\xd0\xc1\x70\x25\x35\xeb\xc4\xa3\x93\x4f\xf5\xa4\x01\xd4\xee\x0b\xa5\xa6\xfa\xe5\x98\x03\x28\xcb\xba\x2c\x8f\xa7\x54\xeb\x38\xac\x67\x52\x52\x71\x9c\x4a\x3a\x38\x3e\x1e\xf2\x6d\x42\xd7\x64\x93\xdc\x61\x9e\xee\x01\x1d\x2d\x17\xfc\xa8\x4d\x2d\x1c\xbf\x44\x53\x97\x8e\x7f\x17\x75\x74\x75\x13\x93\x5c\xb2\x89\x9b\xbd\xf9\xe3\xa8\xc2\x06\x64\x92\xa8\xf3\x38\x35\x0f\x56\x75\x5a\x89\x4f\x89\xab\x15\x4f\xb1\x52\x0c\x0d\x59\xfb\xe9\x4a\xd5\xef\x2c\x52\x4a\x6f\xb5\xb3\xa5\xec\x1c\xc6\x0a\x6c\x1e\x7d\x64\x32\xe5\x26\xc0\x8b\xde\x06\xf2\x06\x86\x50\xec\xef\x08\x27\xcb\x6b\x31\x21\xb9\x1d\x61\x7d\x53\x9d\x86\x89\x6b\x6e\x0f\x6c\x13\x13\x02\x52\xf4\x46\xbc\x27\x77\x17\xe3\xa7\xc0\xf7\x9c\x55\x3f\x8c\x77\x9b\x5c\x84\x44\xe4\x0e\xd6\x8d\x50\xab\x9f\xd4\x3e\x59\xaa\xbe\x09\xba\x34\x31\x77\x32\xef\x14\x8d\x29\xe7\x3a\x86\xb0\x92\x6f\xba\xa7\x2c\xb2\x6f\x49\xca\xf9\x14\x09\x63\xed\x7d\xc4\xed\x72\xed\xb4\xf4\xdc\x60\x3a\x7a\xd8\x8f\xfa\x6b\x4e\x59\x46\x41\x37\x0a\x8e\x41\x89\xa6\x88\x96\xe9\x8c\xd5\x33\xe7\x2c\x60\x09\x88\xbf\x38\x9c\x7c\xf4\x47\xe8\x37\xd8\x49\x77\xd4\x35\xe0\x3f\x8d\x33\xef\xfc\x75\xc1\x22\x82\x62\x7c\x4f\x6b\xad\x46\x6f\xde\xff\x4d\x41\xed\xf6\xc6\x46\x49\x30\xdb\x9e\x7d\x5c\x37\x96\xe6\x6e\xb8\x1e\x3f\x3e\x3d\xa4\xca\x95\x39\x8e\x46\x80\x35\x5c\xdd\x3b\xf3\x38\xc4\xc0\x5b\xa8\x40\x15\xed\x79\x07\xc3\xf2\x76\x97\x8a\xa5\x92\xbc\xfd\xa9\xc9\x7d\x99\xcd\xe5\x05\xec\x76\x73\x4b\x4b\x7c\xd8\xde\x6a\x4e\xb1\x14\x68\xf4\x3c\xe6\xa8\x54\x33\x19\xbd\xe9\x33\x35\x65\xab\x56\x29\x62\x27\xd8\x95\x09\x9a\xc5\xb8\xcf\x16\x65\xf0\xd2\x79\x66\x3d\xbf\xd4\xc5\x9a\x59\xcc\x5e\x0b\x7b\x0e\xf5\x99\xfe\xe2\xed\x5e\x5e\x5e\xbc\x8a\xe6\x8e\x1b\xe4\x52\xcd\x7d\x36\x37\x10\x26\xf8\xa3\xb9\xad\xcd\xe9\xb9\xb4\xdb\xb7\xd9\xdf\xf5\xaa\x88\x6b\x49\x99\xbe\xf2\xcf\xe6\x7e\xbd\x6d\x70\xe9\xa8\x0d\x86\x4c\x15\x7e\x82\xb8\x77\xf2\xf3\x4b\xc1\x1b\x7e\xe8\x90\xb7\xf3\xbe\x96\xee\x16\x95\x19\xc5\x1f\xaf\x64\xfc\x0c\x95\x11\x6e\x0c\xab\x6c\xa3\xa9\x3a\x66\xd3\x92\xac\x27\x4a\xec\x3e\xf9\x02\x29\x1a\xbb\x67\x5e\x4b\x16\x40\x6c\x86\x5d\x2c\x80\xbf\x8f\x65\x9f\x18\x9b\xcf\xa5\xa9\xcd\x49\x23\x25\x36\xf2\x58\x70\xc4\xcd\x78\x99\xc3\x24\x90\xff\xdd\xc4\xc7\x3f\xd8\xfd\x39\xad\x78\xf5\xe3\xc0\xb9\x99\xe6\xb2\x67\xc9\x08\x6d\x2d\x39\x64\x5c\xbf\x7f\x6e\x7a\xf2\xe4\x7e\x12\xcf\x38\x5b\xbd\x48\x19\xfd\xf2\x07\x2e\x57\x8d\x68\x43\x47\x75\xc8\xe9\xbd\x67\x51\xb4\xf4\xc1\x33\xc4\x6f\xfa\x27\x37\x62\xf6\x82\xa7\x4b\xb8\xbc\xa9\x71\xdf\x97\x42\x61\x51\xb4\x97\x7c\xfe\xed\x34\xf6\x82\x38\xb2\xe1\xbe\x60\xa9\xe7\xfe\x0b\xc8\x5c\xf2\x5b\xb5\x36\xb0\xf9\x60\x78\x5f\x69\x96\xdf\x3e\xe6\x27\x28\x82\xce\x3a\xa8\x5b\xb3\x0d\xe9\xcc\x2f\x27\x0c\x96\x40\x3b\x07\xd6\x06\x72\x8a\xe7\x15\x33\x6a\x13\xb8\x82\x2c\x07\xae\xe6\x9d\x4f\xf9\x07\x26\xe1\x1c\x89\xda\x34\x21\x04\x48\x15\x69\x8f\x56\x35\x5e\x98\x10\xb9\x3f\x26\x0b\xd2\x7f\xbc\xa7\x42\x5f\x5d\x03\xcd\x43\xff\xb7\xb3\x61\x28\x1f\xf3\xaf\x08\xfb\x17\x72\xa8\xdc\x44\x2c\x12\x80\xfa\xc3\x04\xda\xff\x96\x0b\x7f\x68\xa1\x35\x0c\x59\x93\x18\x09\xb4\x9f\xd8\xec\x66\x9a\x8e\x40\xce\x3c\x6e\xd7\x74\x18\x50\x7e\xea\x75\x27\x98\xfc\xfd\xae\x70\x65\x1a\xdb\xc5\x0d\xce\xab\x27\x1c\x93\x8d\x02\xdd\x0e\xdc\x61\x3e\x47\x93\x3d\xa4\x3e\x42\x5d\xb4\x98\xea\x19\x14\xce\x71\x6c\x65\x74\x6c\x05\x23\x9e\x42\xa4\x73\xf6\xbf\x53\xb0\xdc\x96\x4c\x7a\x28\x29\x80\x77\x74\x7d\x6f\x24\xfe\x23\xdd\x4d\x51\x84\x2a\x90\xaf\x86\xf2\x95\x75\x13\x90\x4d\xa9\x36\xbe\x3e\xf4\x93\x97\x6e\x91\xc7\x67\xc7\x41\xe7\x9e\x7e\xa7\x3d\xc9\x5e\x5d\x9d\x9a\x4c\x9b\xe9\x4c\xbb\xa6\xc9\x49\xb4\x49\x71\x5b\xea\x12\xac\x1a\x51\xff\xa4\x99\xfa\x53\xb6\x73\xb5\x65\x41\x72\x64\x69\x9f\x76\x84\xa4\x72\x38\xf3\x4a\x27\xb8\x23\x8f\x68\x63\x3b\xd6\x08\x9f\x6f\x52\x2d\x01\x13\x0f\x8b\xc6\xc1\x9d\x13\x52\x55\x93\xa9\x71\x06\x91\x26\xef\x67\x74\x83\xb4\x7e\xa0\x81\xe5\xb4\xcc\xb2\x52\x95\x53\xee\xb7\xac\x4f\x65\x97\x40\xbf\xf5\xc7\x4d\x0c\x03\xa1\x67\x23\xd9\x2f\x12\xf8\x52\x86\x79\xaa\xdc\xb4\x3d\xd0\x33\xa8\xb0\x92\x03\xbc\xb9\x02\x67\x34\x38\x1b\x1b\xf9\xd7\xde\x24\x52\x68\x3c\x28\xae\xd2\xe3\x5f\xe7\x0d\x4a\x9f\x48\x4a\xae\xa9\x49\xf8\xc7\x9e\xe0\xef\xdc\x85\x80\x81\xa1\x5b\xe5\x6e\x74\x95\x6b\x83\xfd\x68\xb7\x1f\x9a\x2f\x2a\x3a\x59\xb5\x27\x50\x3f\xba\x87\x72\x59\x26\x8d\xf3\xdf\x82\xf3\xdc\x6d\x52\xa2\x2f\xb0\x4e\xea\x02\x92\xaf\x07\x15\xca\x16\xb4\x33\x51\xef\xed\x5c\x2f\xc3\x4d\xa6\x25\x61\xe3\xd2\x1e\xfd\x3a\xa0\x03\x66\xe8\xd7\x3f\xb1\x6e\xc4\x26\xf1\x92\x3b\x5a\x9f\xc9\xca\x6f\xa4\x8e\x46\x03\xaa\xb7\x69\x08\xf0\x1f\x5d\xcf\x0c\xa5\xbd\x29\xaf\x72\xb6\xfe\x0f\x55\x96\xbf\x15\xc8\xa1\x46\x01\xda\x92\x52\xd4\xbc\x91\x9b\xc1\x13\x79\x62\x88\x6c\x5c\x2d\x94\x83\x2d\x33\x8f\x4f\x54\xa9\x58\x48\x84\x0c\x25\x39\xe2\x8c\x1f\xf3\xbc\x57\x58\xf9\xb1\x11\x7c\x47\xe7\x9f\x73\x17\xaf\x4b\x0a\x9f\x1e\x19\x61\x36\x92\x0c\xd0\x8f\x4a\x5f\xff\x32\x06\x4c\x2c\x62\xee\x78\x56\x4f\x8c\xff\x49\x75\x1d\x67\xf7\x53\x3b\x80\x9e\x14\xc6\x8c\x72\x8f\xc5\x85\x3b\xf1\xa6\xf6\x30\x54\xb8\x9f\xf1\xfe\xc9\xba\x85\x31\x30\x48\xdc\xe0\xdf\xbb\xca\x09\x43\xab\x98\xfc\xaa\xbe\x6d\x91\xe3\x9b\xff\x06\xd2\xab\x70\x91\x2f\xeb\x83\x38\xf9\x9c\xd8\xc3\xd1\x1a\x31\xab\x8c\x96\x60\xbc\x35\x7e\xbc\xf3\x06\xfd\x96\x16\xc7\x91\xf2\xc0\x58\x60\xa9\x35\x82\x77\xa7\xd8\x52\xb7\x77\xe8\x59\x63\x95\xe5\x09\x62\xfe\x7f\xf7\x0d\x05\x33\xea\x61\x65\xc8\x45\xcd\x4b\x4f\x0e\xf7\x0f\x5f\x18\x28\xf1\x44\xd8\xcc\xcf\x35\xd9\x2f\xfe\xe0\xa9\x8e\x92\x5d\xe3\x25\xc3\xb9\x4f\x5f\xcc\x3c\xe2\xd8\xe7\xb3\xba\xea\xe0\xa9\xac\x4f\x9b\x3a\x57\xcb\x68\x98\xd6\xf8\xf6\x2a\x7f\x98\x1c\x81\xf0\xfe\xc3\x33\xb0\xd9\xae\xaf\x38\x04\xa9\xf5\x02\xeb\xd5\x68\x9d\x0d\xe9\x3a\x61\x2b\x41\xa7\x9a\x94\xef\x3c\x42\xa2\x05\xe3\x13\xc2\x21\x2d\x70\x6f\x53\x28\xc6\xb3\x39\x08\xe3\x3a\x63\xe3\xac\x2c\x7a\x65\xaf\x79\x7b\x87\x99\xcf\xb6\x32\x75\xd5\x68\xe1\xc0\xae\xad\x3c\xf6\x6b\xaf\x28\x96\xe3\x43\x82\xc3\xd1\xaa\xe8\xad\x19\x7e\xfe\x67\x46\x5b\x95\x35\xd7\x27\x6f\xe7\x09\x26\x46\x63\x45\x74\x08\xbe\x35\x71\x58\xde\x31\x5d\xb5\x83\x22\xf1\xbd\x36\xb3\x70\x63\x5c\x81\x38\xde\xfa\x75\xc5\x22\x54\x46\x5d\xbf\x35\xd5\x68\x19\xd6\x65\xce\xd3\xf0\xa1\x18\x99\x4e\xdf\xb5\xf9\x65\xac\xbc\x88\x7d\x05\x39\xbd\x22\x56\xcd\x77\x57\x8a\x3d\xd5\x34\x06\x0b\x83\x68\x0b\x47\x9d\x04\xe0\xdc\xfb\x99\x1a\x17\x14\x8d\x35\x05\xb3\x1f\xec\x87\xbe\x71\x62\xb2\x4e\x2b\xdf\x8a\x35\x86\xbd\x6e\x28\x05\x91\x0a\x31\xef\x5b\x34\x6f\x8b\x73\x48\x62\x94\xc7\x30\x87\x59\x26\x13\x89\x61\x75\xb4\xcc\xcb\x68\x61\x91\xb8\x6e\xae\x7b\xa7\x32\xdf\xd6\x7e\xeb\x87\xd7\xee\x54\x06\xf4\x15\x07\xbd\x57\xbb\x97\x24\x10\xa5\x61\x78\xa9\xef\xe3\xb4\x8f\x45\x48\x7b\x9d\xd7\xaa\xff\xdb\x0e\xcb\xef\x0f\x12\xc6\xa4\x5c\x85\xc6\x62\xf1\x77\x3b\xce\xbf\xde\xd7\x6d\x02\x72\x5e\xba\x45\x18\x76\xb4\xad\x05\x48\xbf\x0d\x61\x4f\xe5\xf1\x4e\x8e\xb7\x3f\xd6\x31\xbf\x21\xc4\x67\x3e\x31\x8b\xef\x8f\x95\x2d\x6d\x7d\x7a\xad\xeb\x56\x78\x71\xc5\x90\x38\x21\x0d\x1c\x89\x6c\x1c\xf8\xf4\x74\x86\x3e\x4a\x7e\x55\x24\xcc\x06\x40\xa9\xd8\x0f\x22\xa6\x8f\x22\x6f\xff\xfc\xaf\xed\x00\xcb\xdb\x77\xcd\x5a\x4d\xa0\x29\xff\x17\x00\x00\xff\xff\x57\x2a\xaf\x14\xfc\x0d\x00\x00")

func logoPngBytes() ([]byte, error) {
	return bindataRead(
		_logoPng,
		"logo.png",
	)
}

func logoPng() (*asset, error) {
	bytes, err := logoPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "logo.png", size: 3580, mode: os.FileMode(420), modTime: time.Unix(1487682290, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"logo.png": logoPng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"logo.png": &bintree{logoPng, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
